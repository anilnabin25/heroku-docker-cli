env:
  RUBY_VERSION: 2.7
  RAILS_ENV: test
  DB_HOST: 127.0.0.1
  DB_USER: root
  DB_PASSWORD: msql_strong_password
  DB_NAME: oriai_relatedly_test

name: Relatedly Workflow
on:
  push:
    branches:
      - develop
      - feature/*
    pull_request:
      types: [opened, synchronize, reopened]
jobs:
  rubocop-test:
    name: Rubocop
    runs-on: ubuntu-latest
    steps:
      - name: Action Checkout v2
        uses: actions/checkout@v2
      - name: Ruby Setup
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
      - name: Action Cache v2
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-
      - name: Configure & Update Bundler
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
      - name: Check code
        run: bundle exec rubocop
  rspec-test:
    name: RSpec
    needs: rubocop-test
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: msql_strong_password
        ports:
          - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      redis:
        image: redis
        ports: ['6379:6379']
        options: --entrypoint redis-server
    steps:
      - uses: actions/checkout@v1
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
      - uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-
      - name: Install dependencies
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
      - name: Copy database yml
        run: |
          mv ./config/database.circleci.yml ./config/database.yml
      - name: Create database
        env:
          DB_PORT: ${{ job.services.mysql.ports[3306] }}
        run: |
          bundle exec rake db:create db:migrate
      - name: Run tests
        env:
          DB_PORT: ${{ job.services.mysql.ports[3306] }}
        run: |
          bundle exec rspec
      - name: Upload coverage results
        uses: actions/upload-artifact@master
        if: always()
        with:
          name: coverage-report
          path: coverage
  deploy:
    name: Deploy to Heroku
    needs: rspec-test
    runs-on: ubuntu-18.04
    if: github.ref == 'refs/heads/develop'
    steps:
    - uses: actions/checkout@v1
    - name: Copy database.yml
      run: cp ./config/database.sample.yml ./config/database.yml

    - name: Login to Github Registry
      run: echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u ${{ secrets.GIT_USER_NAME }} --password-stdin

    - name: Pull Image from Github Registry
      run: docker pull docker.pkg.github.com/$GITHUB_REPOSITORY/oriai_relatedly || true
    
    - name: Build Docker Image
      run: |
        docker build \
        --build-arg PRE_COMPILE=true \
        --build-arg RAILS_ENV=production \
        --build-arg SECRET_KEY_BASE=${{ secrets.SECRET_KEY_BASE }} \
        --build-arg DATABASE_URL=${{ secrets.DATABASE_URL }} \
        --build-arg LANG=${{ secrets.LANG }} \
        --build-arg RAILS_LOG_TO_STDOUT=${{ secrets.RAILS_LOG_TO_STDOUT }} \
        --build-arg TZ=${{ secrets.TZ }} \
        -f docker/Dockerfile.prod \
        -t docker.pkg.github.com/$GITHUB_REPOSITORY/oriai_relatedly .

    - name: Push To Git Registry
      run: docker push docker.pkg.github.com/$GITHUB_REPOSITORY/oriai_relatedly

    - name: Login to heroku registry
      run: echo ${{ secrets.HEROKU_API_KEY }} | docker login registry.heroku.com -u ${{ secrets.HEROKU_LOGIN }} --password-stdin

    - name: Push Docker Image to Heroku Registry
      run: |
        docker tag docker.pkg.github.com/$GITHUB_REPOSITORY/oriai_relatedly registry.heroku.com/${{secrets.HEROKU_APP_NAME}}/web
        docker push registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web

    - name: Release App
      run: |
        echo machine api.heroku.com >> ~/.netrc
        echo "  login ${{ secrets.HEROKU_LOGIN }}" >> ~/.netrc 
        echo "  password ${{ secrets.HEROKU_API_KEY }}" >> ~/.netrc 
        heroku container:release web --app ${{ secrets.HEROKU_APP_NAME }}
        heroku run rake db:migrate --app ${{ secrets.HEROKU_APP_NAME }}
